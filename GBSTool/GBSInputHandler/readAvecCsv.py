# TODO: File header here
# TODO: Use more comments throughout ;-)
# TODO: Bundle all `import' statements at the top
# Project: GBS Tool
# Author: Jeremy VanderMeer, jbvandermeer@alaska.edu
# Date: October 18, 2017
# License: MIT License (see LICENSE file of this package for more information)

# this function is for the reading of a CSV file of the type generated by AVEC
def readAvecCsv(fileName,fileLocation,columnNames,useNames,componentUnits, dateColumnName, dateColumnFormat, timeColumnName = '', timeColumnFormat = '', utcOffsetValue = None, utcOffsetUnit = None, dst = None):
    # general imports
    import numpy as np
    import os
    import tkinter as tk
    from tkinter import filedialog
    import pandas as pd
    
    from GBSInputHandler.processInputDataFrame import processInputDataFrame

    # process input variables
    # convert numpy arrays to lists
    if type(columnNames)== np.ndarray:
        columnNames = columnNames.tolist()
    if type(useNames)== np.ndarray:
        useNames = useNames.tolist()
    # -------------- cd to file location ------------------------
    # TODO: Set this up such that it can easily setup with an interactive interface later (either command line or GUI)
    # if no fileLocation is specified, request the user to input one.
    if fileLocation=='':
        print('Choose directory where input data files are located.')
        root = tk.Tk()
        root.withdraw()
        fileLocation = filedialog.askdirectory()
    os.chdir(fileLocation)


    #------------------- load the file -----------------------------
    df = pd.read_csv(fileName) # read as a data frame
    # TODO: REMOVE THIS, FOR TESTING ONLY
    #df = df.drop(df.index[range(1000,len(df))])
    # check and see if the df column names match the input specification.
    # TODO: throw a catch in here in case it does not find the headers
    gotHeader = False
    columnNamesFromCSV = df.columns.str.replace('\s+', '_')
    if columnNames[0] not in columnNamesFromCSV:
        # if the first row is not the header, look for it further down in the file
        for col in df.columns:
            a = df[col]
            a = a.str.replace('\s+', '_')
            # get the matches for the column name
            idxMatch = a.index[a == columnNames[0]].tolist()
            if len(idxMatch) != 0:
                df.columns = df.loc[idxMatch[0]].str.replace('\s+', '_')
                gotHeader = True
                break
        if gotHeader is False:
            raise ValueError('Input column names were not found in the CSV file.')

    df = processInputDataFrame(df, columnNames, useNames, dateColumnName, dateColumnFormat, timeColumnName, timeColumnFormat, utcOffsetValue, utcOffsetUnit, dst)
   

    return df

