# TODO: File header here
# TODO: Use more comments throughout ;-)
# TODO: Bundle all `import' statements at the top
# Project: GBS Tool
# Author: Jeremy VanderMeer, jbvandermeer@alaska.edu
# Date: October 18, 2017
# License: MIT License (see LICENSE file of this package for more information)

# this function is for the reading of a CSV file of the type generated by AVEC
def readAvecCsv(fileName,fileLocation='',columnNames=None,useNames=None,componentUnits=None):
    # -------------- cd to file location ------------------------
    # TODO: Set this up such that it can easily setup with an interactive interface later (either command line or GUI)
    # if no fileLocation is specified, request the user to input one.
    if fileLocation=='':
        print('Choose directory where input data files are located.')
        import tkinter as tk
        from tkinter import filedialog

        root = tk.Tk()
        root.withdraw()

        fileLocation = filedialog.askdirectory()

    import os
    os.chdir(fileLocation)


    #------------------- load the file -----------------------------
    # TODO: yupp, pandas should do all the tricks we need it to do...
    import pandas as pd
    df = pd.read_csv(fileName) # read as a data frame

    import numpy as np
    x=np.array(df) # convert data frame to array (since every ~ 60th row is a header, which needs to be removed)
    # TODO: have you already found a good cheat sheet for regular expressions? Let me know if you need one.
    #import re
    #non_decimal = re.compile(r'[^\d.]+')
    #non_decimal.sub('', '12.345i5ii3')

    # convert to float. If not possible (headers), replace with the value 1000000 which will be eliminated
    gotHeader = False
    for i in range(x.shape[0]): # for all rows
        for j in range(x.shape[1]): # for all columns
            if isinstance(x[i,j],str): #if is string
                try: # try to convert to a float
                    x[i,j] = float(x[i, j])
                except: # if can't, replace with nan
                    if j==0: # for the first (Date) column. other columns have some string data
                        if gotHeader==False:
                            header = list(x[i,:])
                            gotHeader = True
                        x[i,:] = np.nan


    ind = pd.isnull(x[:,0]) # find all rows with value nan
    x = x[~ind,:] # remove nan values
    dfNew = pd.DataFrame(x, columns=header) # create a temporary dataframe with all columns
    dfNew.columns = dfNew.columns.str.strip()  # remove white spaces at begining and end of headers
    dfNew.columns = dfNew.columns.str.replace('\s+', '_')  # replace spaces in between with underscores

    if columnNames!=None:
        dfNew = dfNew[columnNames] # columnNames can be the header names or indices of columns

    if np.all(useNames!=None):
        dfNew.columns = useNames

    if np.all(componentUnits!=None):
        # import unit conversion definitions
        dir_path = os.path.dirname(os.path.realpath(__file__))
        #TODO: finish adding code to get unit conersion file and update and convert units to default internal units and values to intergers.
        dir_path = dir_path + '..\ '
        here = os.getcwd()
    '''
    dfNew.columns = dfNew.columns.str.strip()  # remove white spaces at begining and end of headers
    dfNew.columns = dfNew.columns.str.replace('\s+', '_')  # replace spaces in between with underscores

    if columnNames!=None: # if columns are defined
        if isinstance(columnNames[0],str): # if columnNames are the header Names and not the indices
            indCol = int
            for i in range(len(columnNames)):
                indCol[i] = header.index(columnNames[i])
        x = x[:,columnNames] # use only the columns requested, if set
    if useNames != None:
        x_df = pd.DataFrame(x, columns=useNames)  # convert back to a dataframe, with headers taken from the file.
    else:
        x_df = pd.DataFrame(x, columns=header)  # convert back to a dataframe, with headers taken from the file.
    x_df.columns = x_df.columns.str.strip() # remove white spaces at begining and end of headers
    x_df.columns = x_df.columns.str.replace('\s+','_') # replace spaces in between with underscores

    # convert the date to datetime
    '''
    '''
    x_df.DATE = pd.to_datetime(x_df.DATE+x_df.TIME, unit='D', origin=pd.Timestamp('1900-01-01'))
    del x_df['TIME']
    '''
    '''
    from datetime import datetime
    dt = [datetime(1,1,1)]*x_df.shape[0]
    for i in  range(x_df.shape[0]):
        # convert the Date from csv to datetime
        dt[i] = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(x_df.DATE[i]) - 2)
        # calculate the time and add to datetime
        a, second = divmod(x_df.TIME[i]*86400,60) # 24*60*60 = 86400
        hour, minute = divmod(a, 60)
        #hour = (x_df.TIME[i]*24)//1
        #minute = (x_df.TIME[i]*24*60-hour*60)//1
        #second = abs(x_df.TIME[i]*24*3600-hour*3600-minute*60)//1
        dt[i] = dt[i].replace(hour=int(hour),minute=int(minute),second=int(second))
    '''

    return dfNew

